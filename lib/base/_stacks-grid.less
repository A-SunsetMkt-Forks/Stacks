//
//  STACK OVERFLOW
//  GRID
//
//  This CSS comes from Stacks, our CSS & Pattern library for rapidly building
//  Stack Overflow. https://gh.stackoverflow.com/Design/Stacks
//
//  For documentation of all these classes and how to contribute,
//  https://gh.stackoverflow.com/pages/Design/Stacks/
//
//  TABLE OF CONTENTS
//  • VARIABLES
//  • MIXINS
//  • UTILITY CLASSES
//  • GRID ELEMENTS
//  • GRID SPACING
//  • MODIFICATIONS
//
//  ============================================================================
//  $   VARIABLES
//  ----------------------------------------------------------------------------
@grid-cols: 12;    //  Desired grid columns


//  ============================================================================
//  --  STACKS GRID MIXINS
//  ============================================================================
//  --  FIXED COLUMN WIDTHS
//  ----------------------------------------------------------------------------
.create-fixed-cells(@num, @count: 1) when (@count =< @num) {

    .grid--cell@{count} {
        flex-basis: @count * 100% / @num;
    }

    .create-fixed-cells(@num, (@count + 1));
}

//  --  AUTO FIXED WIDTH CELLS
//      Automatic adjusting width cells are great. And being able to specify a
//      cell's width is equally amazing. But sometimes you want to be able to
//      have all cell's within a box container to be the same width. Instead
//      stating a fixed cell width, apply a modifying to the box container and
//      all child elements will automatically be sized.
//  ----------------------------------------------------------------------------
.create-grid-count-cols(@num, @count: 1) when (@count =< @num) {
    .grid__allcells@{count} {
        > .grid,
        > .grid--cell {
            flex-basis: @count * 100% / @num;
        }
    }

    .create-grid-count-cols(@num, (@count + 1));
}

//  --  GRID GUTTERS
//  ============================================================================
//      We need two mixins to properly generate grid gutters:
//
//      [1]  Adjusts the fixed column max-width / flex-basis if gutters are present.
//      [2]  Generate the desired gutters.
//
//  ----------------------------------------------------------------------------
//      [1] Adjust width / flex-basis numbers
//
//      HOW IT WORKS:
//      A quick primer on how this mixin works. The TL;DR is we're using a mixin
//      guard to start a loop that'll create all the desired `> .grid--cell@{count}`
//      classes.
//
//      The three mixin parameters are:
//        - @spacing: the desired distance our gutters should be
//        - @num: the number at which we should stop our loop
//        - @count: the current column number
//
//      The other bit is the mixin guard portion:
//
//          when (@count =< @num)
//
//      This checks if we should run the mixin. Using a comparison operator,
//      it's checking to see if the current @count is equal to (=) or less
//      than (<) the desired @num total. If it is, run the mixin.
//
//      Next the mixin runs as normal. Using the @cell-width variable, we
//      calculate the cell's width. We do this here because we need to use the
//      CSS calc function and this makes the code a little prettier. Using the
//      variable, we then update the fixed cell's flex-basis and width.
//
//      Finally we call for the mixin again within itself, assigning a new
//      @count value: the current value + 1. This then fires off the mixin
//      again, creating a loop until we've generated updated widths for all
//      of our desired @num.
//
//      There are two mixins here:
//          • "grid-fixed-cell-row" -- This is the baseline mixin.
//          • "grid-fixed-cell-column" -- When the ".grid" is a column, change
//             the margins, setting a top and bottom margin instead of left
//             and right.
//
//  ----------------------------------------------------------------------------
.grid-fixed-cell-spacing(@spacing, @num: @grid-cols, @count: 1) when (@count =< @num) {
    @cell-width: @count * 100% / @num;

    > .grid--cell@{count} {
        margin: @spacing / 2;
    }

    //  ------------------------------------------------------------------------
    //  [1] FIXED WIDTH CELLS
    //      This makes the fixed width cells to account for gutters.
    //
    //  [2] UNIFORM CHILD GRID CELLS
    //      This class allows you to uniformly state the width of `.grid--cell`
    //      divs within a `.grid` element. In particular we adjust the flex-basis
    //      and max-width here to account for gutters.
    //  ------------------------------------------------------------------------
    > .grid--cell@{count},              // [1]
    &.grid__allcells@{count} > .grid,        // [2]
    &.grid__allcells@{count} > .grid--cell {  // [2]
        flex-basis: calc(~"@{cell-width} - @{spacing}");
    }

    .grid-fixed-cell-spacing(@spacing, @num, (@count + 1));
}


//  ----------------------------------------------------------------------------
//      2.  Generate the desired gutters
//          We halve the spacing value because the spacing value should be the
//          total space between cells--not the total applied to each cell,
//          which would effectively double the desired total.
//
//          The "when" statements here refer to when we declare it's for a
//          row (default) or a column. When a column we need to reset the
//          left and right margins and add in top and bottom margins.
//  ----------------------------------------------------------------------------
.gutter-spacing(@spacing) {
    margin: -(@spacing / 2);

    //  --  FLUID CELLS
    > .grid,
    > .grid--cell {
        margin: @spacing / 2;
    }

    //  --  FIXED WIDTH CELLS
    //      Now we call for the above mixin [1] to make sure we adjust the default
    //      widths for the new gutters.
    .grid-fixed-cell-spacing(@spacing);
}


//  ============================================================================
//  $  UTILITY CLASSES
//  ----------------------------------------------------------------------------
//  --  FLEX DIRECTION
//      This determines the direction content flows within a parent container.
//      The default values are row.
//  ----------------------------------------------------------------------------
.fd-row                   { flex-direction: row; }
.fd-rowreverse            { flex-direction: row-reverse; }
.fd-column                { flex-direction: column; }
.fd-columnreverse         { flex-direction: column-reverse; }

//  --  FLEX WRAP
//      This determines if a parent's child items will wrap or not.
//  ----------------------------------------------------------------------------
.fw-wrap                  { flex-wrap: wrap; }
.fw-reverse               { flex-wrap: wrap-reverse; }
.fw-none                  { flex-wrap: none; }

//  --  FLEX FLOW
//      This is another shorthand property for flex-direction and flex-wrap.
//      Default value is "row nowrap".
//  ----------------------------------------------------------------------------
.ff-row-wrap              { flex-flow: row wrap; }
.ff-row-nowrap            { flex-flow: row nowrap; }
.ff-rowreverse-wrap       { flex-flow: row-reverse wrap; }
.ff-rowreverse-nowrap     { flex-flow: row-reverse nowrap; }
.ff-column-wrap           { flex-flow: column wrap; }
.ff-column-nowrap         { flex-flow: column nowrap; }
.ff-columnreverse-wrap    { flex-flow: column-reverse wrap; }
.ff-columnreverse-nowrap  { flex-flow: column-reverse nowrap; }

//  --  JUSTIFY CONTENT
//      Defines the child alignment along the parent's main axis
//  ----------------------------------------------------------------------------
.jc-center                { justify-content: center; }
.jc-end                   { justify-content: flex-end; }
.jc-spacearound           { justify-content: space-around; }
.jc-spacebetween          { justify-content: space-between; }
.jc-start                 { justify-content: flex-start; }

//  --  ALIGN CONTENT
//      Aligns the container's lines when there is extra space in the
//      cross-axis. Note that this only works when a parent container
//      has more than one line.
//  ----------------------------------------------------------------------------
.ac-center                { align-content: center; }
.ac-end                   { align-content: flex-end; }
.ac-spacearound           { align-content: space-around; }
.ac-spacebetween          { align-content: space-between; }
.ac-start                 { align-content: flex-start; }
.ac-stretch               { align-content: stretch; }

//  --  ALIGN ITEMS
//      Defines the default behavior for how child items align along
//      the parent's cross axis. Think of it the cross-axis for
//      justify-content.
//  ----------------------------------------------------------------------------
.ai-baseline              { align-items: baseline; }
.ai-center                { align-items: center; }
.ai-end                   { align-items: flex-end; }
.ai-start                 { align-items: flex-start; }
.ai-stretch               { align-items: stretch; }

//  --  CENTER ITEMS
//      A common combination of classes is .jc-center and .ai-center.
//      Use this class when you want both.
//  ----------------------------------------------------------------------------
.grid__center             { .jc-center; .ai-center; }

//  --  ALIGN SELF
//      Allows child containers to re-align themselves irregardless
//      of the parent's main axis direction.
//  ----------------------------------------------------------------------------
.as-auto                  { align-self: auto; }
.as-baseline              { align-self: baseline; }
.as-center                { align-self: center; }
.as-end                   { align-self: flex-end; }
.as-start                 { align-self: flex-start; }
.as-stretch               { align-self: stretch; }

//  --  FLEX
//      Graduating scale of flex-grow and flex-shrink values
//  ----------------------------------------------------------------------------
.fl0                      { flex: 0 auto; }
.fl1                      { flex: 1 auto; }
.fl2                      { flex: 2 auto; }
.fl3                      { flex: 3 auto; }
.fl4                      { flex: 4 auto; }
.fl5                      { flex: 5 auto; }

//  --  Ordering
//      Designate a child container's position.
//  ----------------------------------------------------------------------------
.order-first              { order: -1; }
.order-last               { order: 1; }


//  ============================================================================
//  $   GRID ELEMENTS
//  ============================================================================
//      To help simplify our CSS, we create a generic box container. By default
//      this is a row container, but we can modify the box to become a column.
//  ----------------------------------------------------------------------------
.grid {
    //  Add box-sizing to anything within the grid
    &,
    *,
    *:after,
    *:before {
        .box-border;
    }

    display: flex;
}

//  --  UNIVERSAL FLEX WIDTHS
//      This applies a flex value it to all of a grid's direct children.
//  --------------------------------------------------------------------------
.grid__fl0 {
    &,
    > .grid,
    > .grid--cell {
        flex: 0 auto;
    }
}
.grid__fl1 {
    &,
    > .grid,
    > .grid--cell {
        flex: 1 auto;
    }
}


//  $$  FIXED WIDTH CELLS
//  ----------------------------------------------------------------------------
.create-fixed-cells(@grid-cols);

//  $$  AUTO FIXED WIDTH CELLS
//  ----------------------------------------------------------------------------
.create-grid-count-cols(@grid-cols);


//  ============================================================================
//  $   GRID SPACING
//      Insert spaces or gutters in between grid cells
//  ----------------------------------------------------------------------------
.gs2    { .gutter-spacing(@su2); }        //  2px
.gs4    { .gutter-spacing(@su4); }        //  4px
.gs8    { .gutter-spacing(@su8); }        //  8px
.gs12   { .gutter-spacing(@su12); }       //  12px
.gs16   { .gutter-spacing(@su16); }       //  16px
.gs24   { .gutter-spacing(@su24); }       //  24px
.gs32   { .gutter-spacing(@su32); }       //  32px
.gs48   { .gutter-spacing(@su48); }       //  48px
.gs64   { .gutter-spacing(@su64); }       //  64px

//  On rows, remove top and bottom margins
.gsx {
    &,
    > .grid,
    > [class*="grid--cell"] {
        margin-top: 0;
        margin-bottom: 0;
    }
}

//  On columns, remove left and right margins
.gsy {
    &,
    > .grid,
    > [class*="grid--cell"] {
        margin-left: 0;
        margin-right: 0;
    }
}
