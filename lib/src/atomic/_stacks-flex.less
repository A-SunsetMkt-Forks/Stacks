//
//  STACK OVERFLOW
//  FLEXBOX HELPERS
//
//  This CSS comes from Stacks, our CSS & Pattern library for rapidly building
//  Stack Overflow. https://stackoverflow.design/
//
//  For documentation of all these classes and how to contribute,
//  https://gh.stackoverflow.com/pages/Design/Stacks/
//
//  TABLE OF CONTENTS
//  â€¢ UTILITY CLASSES


//  ============================================================================
//  $  UTILITY CLASSES
//  ----------------------------------------------------------------------------
//  --  FLEX DIRECTION
//      This determines the direction content flows within a parent container.
//      The default values are row.
//  ----------------------------------------------------------------------------
.fd-row                   { flex-direction: row; }
.fd-rowreverse            { flex-direction: row-reverse; }
.fd-column                { flex-direction: column; }
.fd-columnreverse         { flex-direction: column-reverse; }

//  --  FLEX WRAP
//      This determines if a parent's child items will wrap or not.
//  ----------------------------------------------------------------------------
.fw-wrap                  { flex-wrap: wrap; }
.fw-reverse               { flex-wrap: wrap-reverse; }
.fw-none                  { flex-wrap: none; }

//  --  FLEX FLOW
//      This is another shorthand property for flex-direction and flex-wrap.
//      Default value is "row nowrap".
//  ----------------------------------------------------------------------------
.ff-row-wrap              { flex-flow: row wrap; }
.ff-row-nowrap            { flex-flow: row nowrap; }
.ff-rowreverse-wrap       { flex-flow: row-reverse wrap; }
.ff-rowreverse-nowrap     { flex-flow: row-reverse nowrap; }
.ff-column-wrap           { flex-flow: column wrap; }
.ff-column-nowrap         { flex-flow: column nowrap; }
.ff-columnreverse-wrap    { flex-flow: column-reverse wrap; }
.ff-columnreverse-nowrap  { flex-flow: column-reverse nowrap; }

//  --  JUSTIFY CONTENT
//      Defines the child alignment along the parent's main axis
//  ----------------------------------------------------------------------------
.jc-center                { justify-content: center; }
.jc-end                   { justify-content: flex-end; }
.jc-spacearound           { justify-content: space-around; }
.jc-spacebetween          { justify-content: space-between; }
.jc-start                 { justify-content: flex-start; }

//  --  ALIGN CONTENT
//      Aligns the container's lines when there is extra space in the
//      cross-axis. Note that this only works when a parent container
//      has more than one line.
//  ----------------------------------------------------------------------------
.ac-center                { align-content: center; }
.ac-end                   { align-content: flex-end; }
.ac-spacearound           { align-content: space-around; }
.ac-spacebetween          { align-content: space-between; }
.ac-start                 { align-content: flex-start; }
.ac-stretch               { align-content: stretch; }

//  --  ALIGN ITEMS
//      Defines the default behavior for how child items align along
//      the parent's cross axis. Think of it the cross-axis for
//      justify-content.
//  ----------------------------------------------------------------------------
.ai-baseline              { align-items: baseline; }
.ai-center                { align-items: center; }
.ai-end                   { align-items: flex-end; }
.ai-start                 { align-items: flex-start; }
.ai-stretch               { align-items: stretch; }

//  --  CENTER ITEMS
//      A common combination of classes is .jc-center and .ai-center.
//      Use this class when you want both.
//  ----------------------------------------------------------------------------
.grid__center             { .jc-center; .ai-center; }

//  --  ALIGN SELF
//      Allows child containers to re-align themselves irregardless
//      of the parent's main axis direction.
//  ----------------------------------------------------------------------------
.as-auto                  { align-self: auto; }
.as-baseline              { align-self: baseline; }
.as-center                { align-self: center; }
.as-end                   { align-self: flex-end; }
.as-start                 { align-self: flex-start; }
.as-stretch               { align-self: stretch; }

//  --  FLEX
//      Graduating scale of flex-grow and flex-shrink values
//  ----------------------------------------------------------------------------
.fl0                      { flex: 0 auto; }
.fl1                      { flex: 1 auto; }
.fl2                      { flex: 2 auto; }
.fl3                      { flex: 3 auto; }
.fl4                      { flex: 4 auto; }
.fl5                      { flex: 5 auto; }

//  --  Ordering
//      Designate a child container's position.
//  ----------------------------------------------------------------------------
.order-first              { order: -1; }
.order-last               { order: 1; }


